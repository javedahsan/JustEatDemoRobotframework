import logging
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.common.exceptions import TimeoutException
import time
from util.firefoxDriver import get_driver


logger = logging.getLogger(__name__)
request_header = {
    "Content-Type": "text/json"
}
# Test step 1 - Open URL


driver = get_driver()

# def test_open_url and verify:
#     """
#        This tests verifies the OpsHubMonitor UI ui is launched from the system.
#        Steps:
#            1. Launch OpsHubMonitor url
#        Expected results:
#            1. Verify OpsHubMonitor page is loaded
#            2. Verify the element Option is selected
#            3. Verify the element Option launches the required tabs
#     """

def extractPostalCode(postalCode):
    '''
    Reformat postal code from AA511AA to AA51 1AA
    '''
    temp = []
    for i in range(len(postalCode)):
            if (postalCode[i] == ' ' or postalCode == None):
                continue
            else:
                temp.append(postalCode[i])
    return  ''.join([i for i in temp])



def display_Title(screenElement):
    '''
    Return the page title - Just Eat
    '''
    assert driver.title, screenElement


def find_contentTitles(title, subtitle):
    '''
    Find Content Title and Subtitle
    Return Text:
        Tuck into a takeaway today
        Find restaurants delivering right now, near you
    '''
    retTitle = driver.find_element(By.CLASS_NAME, title).text
    retSubTitle = driver.find_element(By.CLASS_NAME, subtitle).text
    print(retTitle,' ', retSubTitle)
    return retTitle, retSubTitle


def find_Search():
    '''
    Find Search Query field, label and Search button
        Return Text:
            name: postcode
            aria-lable: Enter your postcode
            Seach button type : submit
            Find restaurants delivering right now, near you
    '''
    retform = driver.find_element_by_tag_name('form')
    retLabel = retform.find_element(By.TAG_NAME,'label')
    retSearch = retLabel.find_element(By.TAG_NAME, 'input')

    retBtn = retform.find_element(By.TAG_NAME,'button').get_attribute('type')

    retName = retSearch.get_attribute('name')
    retType = retSearch.get_attribute('aria-label')

    return retName, retType, retBtn

def enter_postalCode(postcode):
    '''
    Validate Postal code in Search Query field
        Return:
            if Postal code valid: display list of available resturants in given Postal code
            Else display Error message

    '''
    retform = driver.find_element_by_tag_name('form')
    retLabel = retform.find_element(By.TAG_NAME, 'label')
    retSearch = retLabel.find_element(By.TAG_NAME, 'input')

    retSearch.clear()
    retSearch.send_keys(postcode)
    time.sleep(10)
    # click Submit button
    retBtn = retform.find_element(By.TAG_NAME, 'button')
    retBtn.click()
    time.sleep(10)

    try:
        WebDriverWait(driver, 100).until(
            lambda driver: driver.find_element(By.TAG_NAME, "footer"))
        print("Filtered Page is ready")
        # c-locationHeader-container
    except TimeoutException:
        print("Loading took too much time")

def postalcode_ErrorMsg():
            errMsg = driver.find_element(By.ID, 'errorMessage').text
            return errMsg

def filtered_resturants():
    '''
    Filtered list of Resturant based on postal code
    Captured Postal Code
    and counts message including Total number of Resturant found basded on given postal code
    '''
    postCode = driver.find_element(By.CLASS_NAME, 'c-locationHeader-container').text.encode("utf-8")
    retPostCode = postCode.split(",")

    countMsg = driver.find_element(By.CLASS_NAME, 'c-searchHeader').text.encode("utf-8")
    print("counterMsg", countMsg)
    return extractPostalCode(retPostCode[0]), countMsg

def test_xpath_request(requestElement):
    """
       This definition verifies the requested element on the page and selects the option on the UI.
    """
    try:
        # driver.get(request_url)
        # time.sleep(10)
        el = driver.find_element_by_xpath(requestElement)
        webdriver.ActionChains(driver).move_to_element(el).click(el).perform()
        driver.save_screenshot("FailedImages/openElement.png")
    except Exception as ex:
        # driver.save_screenshot("openElement.png")
        # screenshot = driver.get_screenshot_as_png()
        driver.get_screenshot_as_file('FailedImages/requestElement.png')
        print ex.message
        raise ex


def test_elements(xpathelement, screenElement):
    """
       This definition presents the options generated by clicking the elements and compares.
    """

    try:
        assert xpathelement, screenElement
        driver.save_screenshot("FailedImages/ele2.png")
        time.sleep(5)
    except Exception as ex:
        driver.save_screenshot("FailedImages/ele2.png")
        print ex.message
        raise ex
